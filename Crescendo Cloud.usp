/*
 * Adelyte Company
 * www.adelyte.com
 */

#SYMBOL_NAME "Crescendo Cloud"
#CATEGORY "46" "Crescendo" // Custom
#DEFAULT_VOLATILE
#ENABLE_DYNAMIC

// Compiler Settings
// #DEFINE_CONSTANT #DEBUG 1   // Enable trace statements etc
// #DEFINE_CONSTANT #DEVELOP 1 // Use staging server rather than production servers
// #DEFINE_CONSTANT #EMBED 1   // Suppress properties incompatible with parameter substitution

#IF_DEFINED #DEBUG
#ENABLE_TRACE
#ENABLE_STACK_CHECKING
#ENDIF

// Input/Output Sizes
#DEFINE_CONSTANT #KEY_VALUE_SIZE    998
#DEFINE_CONSTANT #KEY_VALUE_SIZEx2 1996

// Server IP Addresses
#IF_DEFINED #DEVELOP
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_SIZE 1
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_DEV "159.203.101.192"
#ENDIF

#IF_NOT_DEFINED #DEVELOP
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_SIZE 10
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_AMS2 "82.196.14.206"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_AMS3 "188.166.5.178"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_FRA1 "46.101.140.132"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_LON1 "178.62.92.82"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_NYC1 "192.81.215.136"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_NYC2 "162.243.105.241"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_NYC3 "104.236.98.139"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_SFO1 "104.236.165.117"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_SGP1 "128.199.76.5"
#DEFINE_CONSTANT #CRESCENDO_CLOUD_HOST_TOR1 "159.203.30.228"
#ENDIF

#DEFINE_CONSTANT #CRESCENDO_CLOUD_PORT 50000

// Key:Value Protocol
#DEFINE_CONSTANT #MESSAGE_DELIMITER "\x1F\x1E" // unit separator (^_) + record separator (^^)
#DEFINE_CONSTANT #MESSAGE_KEY_DELIMITER ":\x1F " // colon + unit separator (^_) + space


// Inputs and Outputs

DIGITAL_INPUT  Connect, Disconnect, _SKIP_;
DIGITAL_OUTPUT Connected, _SKIP_, _SKIP_;

#IF_SERIES2
DIGITAL_INPUT  _SKIP_;
DIGITAL_OUTPUT _SKIP_;
#ENDIF

DIGITAL_INPUT  Digital_Value_Is[#KEY_VALUE_SIZE], _SKIP_;
DIGITAL_OUTPUT Digital_Value[#KEY_VALUE_SIZE], _SKIP_;

STRING_OUTPUT Console_Tx;
BUFFER_INPUT  Console_Rx[65534];

STRING_INPUT  Cloud_Tx[255];
STRING_OUTPUT Cloud_Rx, _SKIP_, _SKIP_;

STRING_INPUT  User_Program_Command[255], _SKIP_;

ANALOG_INPUT  Analog_Value_Is[#KEY_VALUE_SIZE], _SKIP_;
STRING_OUTPUT Analog_Value[#KEY_VALUE_SIZE], _SKIP_; // Analog values are set with strings

STRING_INPUT  Serial_Value_Is[#KEY_VALUE_SIZE][255];
STRING_OUTPUT Serial_Value[#KEY_VALUE_SIZE];

TCP_CLIENT Client[4095];

STRING_PARAMETER Project[32];
STRING_PARAMETER Users[250];
STRING_PARAMETER Server_Region[15];
#IF_SERIES2
STRING_PARAMETER Serial_Code[8];
#ENDIF

STRING_PARAMETER Digital_Key[#KEY_VALUE_SIZE][250], _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_;
STRING_PARAMETER Analog_Key[#KEY_VALUE_SIZE][250], _SKIP_;
STRING_PARAMETER Serial_Key[#KEY_VALUE_SIZE][250];

#IF_NOT_DEFINED #EMBED
#BEGIN_PARAMETER_PROPERTIES Server_Region

    propValidUnits = unitString;
    propDefaultValue = "NYC";
    propList =
      { "AMS", "Amsterdam" },
      { "FRA", "Frankfurt"},
      { "LON", "London"},
      { "NYC", "New York"},
      { "SFO", "San Francisco"},
      { "SGP", "Singapore"},
      { "TOR", "Toronto"};

#END_PARAMETER_PROPERTIES

#IF_SERIES2
#BEGIN_PARAMETER_PROPERTIES Serial_Code

    propValidUnits = unitString;
    propDefaultValue = "00000000";
    propShortDescription = "Eight-character, zero-padded hexadecimal serial code, e.g. '00765E2F'.";

#END_PARAMETER_PROPERTIES
#ELSE
#ENDIF

#BEGIN_PARAMETER_PROPERTIES Digital_Key

    propValidUnits = unitString;
    propDefaultValue = "";
    propShortDescription = "Invalid character are . $ # [ ] / and ASCII control characters 0-31 and 127.";

#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Analog_Key

    propValidUnits = unitString;
    propDefaultValue = "";
    propShortDescription = "Invalid character are . $ # [ ] / and ASCII control characters 0-31 and 127.";

#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Serial_Key

    propValidUnits = unitString;
    propDefaultValue = "";
    propShortDescription = "Invalid character are . $ # [ ] / and ASCII control characters 0-31 and 127.";

#END_PARAMETER_PROPERTIES
#ENDIF 


// Hash Table
/*
Hash Table with Linear Probing
  Benchmarks
    RMC3: over 2,100 ops/sec for HashGet() vs 50 ops/sec for linear search
    PRO2: over 1,600 ops/sec for HashGet() vs 65 ops/sec for linear search  

Kernighan and Ritchie Hash Function
  Benchmarks
    RMC3: over 13,000 ops/sec
    PRO2: over  1,700 ops/sec

  Digital Hash Table: 998 keys, 27 collisions (2%) # sequential keys
  Analog Hash Table:  396 keys, 68 collisions (17%)
  Serial Hash Table:  297 keys, 25 collisions (8%)
*/

INTEGER_FUNCTION HashCode(STRING key)
{
    INTEGER i, hash;

    IF(key = "")
    {
        RETURN(#KEY_VALUE_SIZEx2);
    }

    hash = 0;
    FOR(i = 1 TO LEN(key))
    {
        hash = 31 * hash + BYTE(key, i); // multiplication is computed modulo
    }

    hash = hash UMOD #KEY_VALUE_SIZEx2; // lazy mod with slight bias to low values

    RETURN(hash);
}

// NOTE: HashSet and HashGet could be generic if parameters were available to functions READONLYBYREF
INTEGER __Digital_Key_Hash_Table__[#KEY_VALUE_SIZEx2];

FUNCTION DigitalHashSet(STRING key, INTEGER value)
{
    INTEGER i, hash, slot;

    hash = HashCode(key);
    IF(hash = #KEY_VALUE_SIZEx2)
    {
        RETURN;
    }

    FOR(i = 0 TO #KEY_VALUE_SIZEx2 - 1)
    {
        slot = (hash + i) MOD #KEY_VALUE_SIZEx2;

        IF(__Digital_Key_Hash_Table__[slot] = 0)
        {
            __Digital_Key_Hash_Table__[slot] = value;
            BREAK;
        }
    }
}

INTEGER_FUNCTION DigitalHashGet(STRING key)
{
    INTEGER i, hash, slot, index;

    hash = HashCode(key);
    IF(hash = #KEY_VALUE_SIZEx2)
    {
        RETURN(#KEY_VALUE_SIZEx2);
    }

    FOR(i = 0 TO #KEY_VALUE_SIZEx2 - 1)
    {
        slot = (hash + i) MOD #KEY_VALUE_SIZEx2;
        index = __Digital_Key_Hash_Table__[slot];

        IF(index = 0)
        {
            RETURN(#KEY_VALUE_SIZEx2);
        }

        IF(Digital_Key[index] = key)
        {
            RETURN(index);
        }
    }
}

INTEGER __Analog_Key_Hash_Table__[#KEY_VALUE_SIZEx2];

FUNCTION AnalogHashSet(STRING key, INTEGER value)
{
    INTEGER i, hash, slot;

    hash = HashCode(key);
    IF(hash = #KEY_VALUE_SIZEx2)
    {
        RETURN;
    }

    FOR(i = 0 TO #KEY_VALUE_SIZEx2 - 1)
    {
        slot = (hash + i) MOD #KEY_VALUE_SIZEx2;

        IF(__Analog_Key_Hash_Table__[slot] = 0)
        {
            __Analog_Key_Hash_Table__[slot] = value;
            BREAK;
        }
    }
}

INTEGER_FUNCTION AnalogHashGet(STRING key)
{
    INTEGER i, hash, slot, index;

    hash = HashCode(key);
    IF(hash = #KEY_VALUE_SIZEx2)
    {
        RETURN(#KEY_VALUE_SIZEx2);
    }

    FOR(i = 0 TO #KEY_VALUE_SIZEx2 - 1)
    {
        slot = (hash + i) MOD #KEY_VALUE_SIZEx2;
        index = __Analog_Key_Hash_Table__[slot];

        IF(index = 0)
        {
            RETURN(#KEY_VALUE_SIZEx2);
        }

        IF(Analog_Key[index] = key)
        {
            RETURN(index);
        }
    }
}

INTEGER __Serial_Key_Hash_Table__[#KEY_VALUE_SIZEx2];

FUNCTION SerialHashSet(STRING key, INTEGER value)
{
    INTEGER i, hash, slot;

    hash = HashCode(key);
    IF(hash = #KEY_VALUE_SIZEx2)
    {
        RETURN;
    }

    FOR(i = 0 TO #KEY_VALUE_SIZEx2 - 1)
    {
        slot = (hash + i) MOD #KEY_VALUE_SIZEx2;

        IF(__Serial_Key_Hash_Table__[slot] = 0)
        {
            __Serial_Key_Hash_Table__[slot] = value;
            BREAK;
        }
    }
}

INTEGER_FUNCTION SerialHashGet(STRING key)
{
    INTEGER i, hash, slot, index;

    hash = HashCode(key);
    IF(hash = #KEY_VALUE_SIZEx2)
    {
        RETURN(#KEY_VALUE_SIZEx2);
    }

    FOR(i = 0 TO #KEY_VALUE_SIZEx2 - 1)
    {
        slot = (hash + i) MOD #KEY_VALUE_SIZEx2;
        index = __Serial_Key_Hash_Table__[slot];

        IF(index = 0)
        {
            RETURN(#KEY_VALUE_SIZEx2);
        }

        IF(Serial_Key[index] = key)
        {
            RETURN(index);
        }
    }
}


// Socket Functions

STRING Hosts[#CRESCENDO_CLOUD_HOST_SIZE][15]; // NOTE: Array declaration is one greater than necessary
INTEGER __Host__;

FUNCTION __Connect__()
{
    SIGNED_INTEGER status;

    status = SOCKETCONNECTCLIENT(Client, Hosts[__Host__], #CRESCENDO_CLOUD_PORT, 1);
    IF(status < 0)
    {
        TRACE("Crescendo Cloud: ERROR %d connecting socket to address '%s' on port  %u", status, Hosts[__Host__], #CRESCENDO_CLOUD_PORT);
    }
    ELSE
    {
        GENERATEUSERNOTICE("Crescendo Cloud: CONNECTED to address '%s' on port  %u", Hosts[__Host__], #CRESCENDO_CLOUD_PORT);
    }
}

FUNCTION Send(STRING tx)
{
    SIGNED_INTEGER status;

    TRACE("Crescendo Cloud: Send '%s'", tx);

    status = SOCKETSEND(Client, tx);
    IF(status < 0)
    {
        TRACE("Crescendo Cloud: ERROR %d connecting socket to address '%s' on port  %u", status, Hosts[__Host__], #CRESCENDO_CLOUD_PORT);
    }
}

FUNCTION SendKeyValue(STRING key, STRING value)
{
    SIGNED_INTEGER status;
    STRING tx[4095];

    MAKESTRING(tx, "%s%s%s%s", key, #MESSAGE_KEY_DELIMITER, value, #MESSAGE_DELIMITER);

    Send(tx);
}


// Console Events

STRING __Console_Tx__[32];

FUNCTION SendConsole(STRING command)
{
    __Console_Tx__ = command;
    CLEARBUFFER(Console_Rx);

    MAKESTRING(Console_Tx, "%s\n", command);
}

FUNCTION SendConsoleDirect(STRING shell, STRING command)
{
    __Console_Tx__ = shell;
    CLEARBUFFER(Console_Rx);

    MAKESTRING(Console_Tx, "%s\n", command);
}

FUNCTION GetVersion()
{
    SendConsole("ver");
}

STRUCTURE SYSTEM
{
    STRING model[16], firmware[30], serial_code[8];
    STRING system_key[32];
    STRING mac_address[40], ip_address[40]; // may contain two addresses
    STRING uptime[20];
    STRING program_runtime[30], program_path[1023], program_file[255];
    STRING program_name[255], program_compiled_at[20];
    STRING memory_free[10], memory_used[10];
    STRING cpu_idle[6];
};

SYSTEM Processor;

FUNCTION SetVersion(STRING console)
{
// EXAMPLE: MC3 Cntrl Eng [v1.010.0060 (Sep 29 2014), #00765E2F]
    
    INTEGER start, end, count;

    // Model
    start = 1;
    end = FIND(" ", console);
    count = end - start;
    Processor.model = MID(console, start, count);

    // Firmware
    start = FIND("[v", console) + 2;
    end = FIND(" ", console, start);
    count = end - start;
    Processor.firmware = MID(console, start, count);

    // Serial Code
    #IF_SERIES3
    start = FIND(", #", console) + 3;
    end = FIND("]", console, start);
    count = end - start;
    Processor.serial_code = MID(console, start, count);
    #ELSE
    Processor.serial_code = Serial_Code;
    #ENDIF

    SendKeyValue("model", Processor.model);
    SendKeyValue("serial", Processor.serial_code);
    SendKeyValue("firmware", Processor.firmware);
    SendKeyValue("project", Project);
    SendKeyValue("users", Users);
}

FUNCTION GetProgCom()
{
    SendConsole("progcom");
}

FUNCTION SetProgCom(STRING console)
{
/* EXAMPLE:
Program Boot Directory: \SIMPL\app01
Source File:  C:\Users\wes\Code\adelyte_van-de-grift-deer-valley\Lighting\Van de Grift Deer Pointe CP3\Programs\Van de Grift Deer Pointe CP3
Program File: Van de Grift Deer Pointe CP3.smw
System Name:  Van de Grift Deer Pointe CP3
Programmer:   D3 Pro 3.02.008
Compiled On:  12/2/2015 5:37 PM
Compiler Rev: 3.03
SYMLIB Rev:   956
IOLIB Rev:    956
IOPCFG Rev:   4.1.75
CrestronDB:   52.05.013.00
Source Env:   SIMPL Windows v4.03.14
Target Rack:  CP3
Config Rev:   22
Include4.dat: 2.02.046
*/

    INTEGER start, end, count;

    start = FIND("Directory: ", console) + 11;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.program_runtime = MID(console, start, count);

    start = FIND("Source File:  ", console) + 14;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.program_path = MID(console, start, count);

    start = FIND("Program File: ", console) + 14;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.program_file = MID(console, start, count);

    start = FIND("System Name:  ", console) + 14;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.program_name = MID(console, start, count);

    start = FIND("Compiled On:  ", console) + 14;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.program_compiled_at = MID(console, start, count);

    SendKeyValue("program-runtime", Processor.program_runtime);
    SendKeyValue("program-path", Processor.program_path);
    SendKeyValue("program-file", Processor.program_file);
    SendKeyValue("program-name", Processor.program_name);
    SendKeyValue("program-compiled-at", Processor.program_compiled_at);
}

#IF_SERIES3
FUNCTION GetNetwork()
{
    SendConsole("ipconfig");
}

FUNCTION SetNetwork(STRING console)
{
/* EXAMPLE:
Ethernet Adapter [LAN9217]:
      Link Status ....... : OK 
      DHCP .............. : OFF 
      MAC Address(es).... : 00.10.7f.1f.57.05 
      IP Address ........ : 10.0.0.151 
      Subnet Mask ....... : 255.255.255.0 
      IPv6 Address....... : fe80::210:7fff:fe1f:5705%5 
      Default Gateway ... : 10.0.0.1 
      DNS Servers........ : None 
 */

    INTEGER start, end, count;

    // MAC Address
    start = FIND("MAC Address(es).... : ", console) + 22;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.mac_address = MID(console, start, count);

    // IP Address
    start = FIND("IP Address ........ : ", console) + 22;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.ip_address = MID(console, start, count);

    SendKeyValue("mac-address", Processor.mac_address);
    SendKeyValue("local-ip-address", Processor.ip_address);
}
#ELSE
FUNCTION GetNetwork()
{
    SendConsole("est");
}

FUNCTION SetNetwork(STRING console)
{
/* EXAMPLE
Ethernet Status: LAN A        LAN B
  Link Status:   OK           No Link 
  Link Speed:    100 Mbps     n/a
  Full Duplex:   YES          n/a
Ethernet Parameters:
  Enabled:     On
  MAC Address(es): 00.10.7f.37.5c.9b        NOT_FOUND
  IP Address:  192.168.001.051    Not Loaded
  Subnet Mask: 255.255.255.000    Not Loaded
  Def Router : 192.168.001.001
  DHCP:        Off
  WINS:        Off
  Host Name:   ADELYTEPRO2
  Domain Name: (none entered)
  SSL:         OFF,Off
*/

    INTEGER start, end, count;

    // MAC Address
    start = FIND("MAC Address(es).... : ", console) + 22;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.mac_address = MID(console, start, count);

    // IP Address
    start = FIND("IP Address ........ : ", console) + 22;
    end = FIND("\n", console, start);
    count = end - start;
    Processor.ip_address = MID(console, start, count);

    SendKeyValue("mac-address", Processor.mac_address);
    SendKeyValue("local-ip-address", Processor.ip_address);
}
#ENDIF

FUNCTION GetUptime()
{
    SendConsole("uptime");
}

FUNCTION SetUptime(STRING console)
{
/* EXAMPLE
The system has been running for 1 days 20:57:04.00
The system last started on: Sunday, December 06, 2015 at 14:36:36
*/

    INTEGER start, end, count;
    STRING days[5], timestamp[16];

    start = FIND("running for ", console) + 12;
    end = FIND(" days", console, start);
    count = end - start;
    days = MID(console, start, count);

    start = end + 6;
    end = FIND("\n", console, start);
    count = end - start;
    timestamp = MID(console, start, count);

    MAKESTRING(Processor.uptime, "%s.%s", days, timestamp);

    SendKeyValue("uptime", Processor.uptime);
}

#IF_SERIES3
FUNCTION GetMemory()
{
    SendConsole("ramfree");
}

FUNCTION SetMemory(STRING console)
{
/* EXAMPLE
38 percent of memory in use
199446528 total bytes of physical memory
75534336 bytes actually used
123912192 bytes free
0 bytes reclaimable
*/

    INTEGER start, end, count;

    start = FIND("physical memory\n", console) + 17;
    end = FIND(" bytes actually used\n", console);
    count = end - start;
    Processor.memory_used = MID(console, start, count);

    start = FIND("\n", console, end) + 2;
    end = FIND(" bytes free\n", console);
    count = end - start;
    Processor.memory_free = MID(console, start, count);

    SendKeyValue("memory-free", Processor.memory_free);
    SendKeyValue("memory-used", Processor.memory_used);
}

FUNCTION GetLoad()
{
    SendConsole("cpuload");
}

FUNCTION SetLoad(STRING console)
{
/* EXAMPLE
CPU:LOAD 4%
*/
    INTEGER load;

    load = ATOI(console);
    Processor.cpu_idle = ITOA(100 - load);

    SendKeyValue("cpu-idle", Processor.cpu_idle);
}
#ELSE
FUNCTION GetMemory()
{
    SendConsole("heapfree");
}

FUNCTION SetMemory(STRING console)
{
/* EXAMPLE
42427372 bytes free
24681492 bytes used
Blk starts at 81DC0D9C
*/

    INTEGER start, end, count;

    start = 1;
    end = FIND(" bytes free\n", console);
    count = end - start;
    Processor.memory_free = MID(console, start, count);

    start = FIND("\n", console, end) + 2;
    end = FIND(" bytes used\n", console);
    count = end - start;
    Processor.memory_used = MID(console, start, count);

    SendKeyValue("memory-free", Processor.memory_free);
    SendKeyValue("memory-used", Processor.memory_used);
}

FUNCTION GetLoad()
{
    SendConsole("top");
}

FUNCTION SetLoad(STRING console)
{
/* EXAMPLE
Sorting...

thread=ReaLIdle	utilization=99.56%
thread=TCP_Read	utilization=0.2%
thread=ERR TASK	utilization=0.2%
*/

    INTEGER start, end, count;

    start = FIND("thread=ReaLIdle	utilization=", console) + 30;
    end = FIND("%\n", console, start);
    count = end - start;
    Processor.cpu_idle = MID(console, start, count);

    SendKeyValue("cpu-idle", Processor.cpu_idle);
}
#ENDIF

FUNCTION SetKeyValues()
{
  INTEGER index;

  FOR(index = 1 TO #KEY_VALUE_SIZE)
  {
    IF(Digital_Key[index] != "")
    {
        IF(Digital_Value_Is[index])
        {
            SendKeyValue(Digital_Key[index], "true");
        }
        ELSE
        {
            SendKeyValue(Digital_Key[index], "false");
        }
    }

    IF(Analog_Key[index] != "")
    {
        SendKeyValue(Analog_Key[index], ITOA(Analog_Value_Is[index]));
    }

    IF(Serial_Key[index] != "")
    {
        SendKeyValue(Serial_Key[index], Serial_Value_Is[index]);
    }
  }
}

FUNCTION Heartbeat()
{
    SendKeyValue("updated", TIME());

    WAIT(6000, __Wait_Heartbeat__)
    {
        Heartbeat();
    }

    GetMemory();
    GetLoad();
}

STRING __Prompt__[16];

CHANGE Console_Rx
{
    STRING rx[4095], prompt[16];

    IF(__Prompt__ = "")
    {
        __Prompt__ = REMOVE(">", Console_Rx);
        GENERATEUSERNOTICE("Crescendo Cloud: PROMPT is '%s'", __Prompt__);

        TERMINATEEVENT;
    }

    rx = GATHER(__Prompt__, Console_Rx);
    rx = LEFT(rx, LEN(rx) - LEN(__Prompt__)); // Trim Prompt

    IF(rx = "")
    {
        TERMINATEEVENT;
    }

    IF(__Console_Tx__ = "ver")
    {
        SetVersion(rx);
        GetNetwork();
    }
    ELSE IF(__Console_Tx__ = "ipconfig")
    {
        SetNetwork(rx);
        GetProgCom();
    }
    ELSE IF(__Console_Tx__ = "progcom")
    {
        SetProgCom(rx);
        GetUptime();
    }
    ELSE IF(__Console_Tx__ = "uptime")
    {
        SetUptime(rx);
        Heartbeat();
        SetKeyValues();
    }
    ELSE
    {
        // NOTE: the compiler does not allow the `ELSE IF` statements to be placed inline
	    #IF_SERIES3
	    IF(__Console_Tx__ = "ramfree")
	    {
	        SetMemory(rx);
	    }
	    ELSE IF(__Console_Tx__ = "cpuload")
	    {
	        SetLoad(rx);
	    }
        ELSE
        {
            SendKeyValue(__Console_Tx__, rx);
        }
	    #ELSE
	    IF(__Console_Tx__ = "heapfree")
	    {
	        SetMemory(rx);
	    }
	    ELSE IF(__Console_Tx__ = "top")
	    {
	        SetLoad(rx);
	    }
        ELSE
        {
            SendKeyValue(__Console_Tx__, rx);
        }
	    #ENDIF
    }
}


// System Events

CHANGE Cloud_Tx
{
    Send(Cloud_Tx);
}


// Socket Events

FUNCTION __Init__()
{
    INTEGER i;

    // Get Console Prompt
    SendConsoleDirect("", "\r");

    // Hash Table Initialization
    SETARRAY(__Digital_Key_Hash_Table__, 0);
    SETARRAY(__Analog_Key_Hash_Table__, 0);
    SETARRAY(__Serial_Key_Hash_Table__, 0);

    FOR(i = 1 TO #KEY_VALUE_SIZE)
    {
        DigitalHashSet(Digital_Key[i], i);
        AnalogHashSet(Analog_Key[i], i);
        SerialHashSet(Serial_Key[i], i);
    }

    GetVersion();
}

SOCKETCONNECT Client
{
    Connected = 1;
    
    __Init__();
}

SOCKETDISCONNECT Client
{
    Connected = 0;
    CLEARBUFFER(Client.SocketRxBuf);
}

SOCKETSTATUS Client
{
    SIGNED_INTEGER status;

    status = SOCKETGETSTATUS();
    TRACE("Crescendo Cloud: STATUS %d", status);

    CSWITCH(status)
    {
        CASE(3): // Connection failed
        CASE(4): // Connection broken remotely
        {
            __Host__ = (__Host__ + 1) MOD #CRESCENDO_CLOUD_HOST_SIZE;

            __Connect__();
        }
    }
}


INTEGER __Parsing__;
STRING __Rx_Buffer__[65534];

INTEGER_FUNCTION IsNumber(STRING text)
{
    INTEGER i, char;

    IF(LEN(text) > 5)
    {
        RETURN(0);
    }

    FOR(i = 1 TO LEN(text))
    {
        char = BYTE(text, i);
        IF(char < '0' || '9' < char)
        {
            RETURN(0);
        } 
    }

    RETURN(1);
}

SOCKETRECEIVE Client
{
    INTEGER i, value;
    STRING rx[255], key[250];

    TRACE("Crescendo Cloud: SocketRxBuf: '%s'", Client.SocketRxBuf);

    __Rx_Buffer__ = __Rx_Buffer__ + Client.SocketRxBuf;
    CLEARBUFFER(Client.SocketRxBuf);

    IF(__Parsing__ = 1)
    {
        TERMINATEEVENT;
    }

    __Parsing__ = 1;

    WHILE(LEN(__Rx_Buffer__) > 0)
    {
        rx = REMOVE(#MESSAGE_DELIMITER, __Rx_Buffer__);

        TRACE("Crescendo Cloud: rx: '%s'", rx);
        rx = LEFT(rx, LEN(rx) - 2); // trim delimiter
  
        #IF_DEFINED #DEBUG
        Cloud_Rx = rx;
        #ENDIF
  
        key = REMOVE(#MESSAGE_KEY_DELIMITER, rx);
        key = LEFT(key, LEN(key) - 3); // trim delimiter
  
        TRACE("Crescendo Cloud: key:value %s:%s", key, rx);
  
        IF("shell" = LEFT(key, 5))
        {
            SendConsoleDirect(key, rx);
        }
        ELSE
        {
            IF(rx = "true" || rx = "false" || rx = "pulse")
            {
                i = DigitalHashGet(key);
                IF(i <= #KEY_VALUE_SIZE)
                {
                    IF(rx = "true")
                    {
                        Digital_Value[i] = 1;
                    }
                    ELSE IF(rx = "false")
                    {
                        Digital_Value[i] = 0;
                    }
                    ELSE
                    {
                        Digital_Value[i] = 1;
                        PROCESSLOGIC();
                        Digital_Value[i] = 0;
                    }
                }
            }
            ELSE IF(IsNumber(rx))
            {
                i = AnalogHashGet(key);
                IF(i <= #KEY_VALUE_SIZE)
                {
                    value = ATOI(rx);
                    IF(value > 255)
                    {
                        MAKESTRING(Analog_Value[i], "%c%c", HIGH(value), LOW(value));
                    }
                    ELSE
                    {
                        MAKESTRING(Analog_Value[i], "%c", value);
                    }
                }
            }
            ELSE
            {
                i = SerialHashGet(key);
                IF(i <= #KEY_VALUE_SIZE)
                {
                    Serial_Value[i] = rx;
                }
            }
        }

        PROCESSLOGIC();
    }

    __Parsing__ = 0;
}


// Key-Value Store

PUSH Digital_Value_Is
{
    INTEGER index;

    index = GETLASTMODIFIEDARRAYINDEX();

    TRACE("Digital_Value_Is[%u] true", index);

    IF(Connected)
    {
        SendKeyValue(Digital_Key[index], "true");
    }
}

RELEASE Digital_Value_Is
{
    INTEGER index;

    index = GETLASTMODIFIEDARRAYINDEX();

    TRACE("Digital_Value_Is[%u] false", index);

    IF(Connected)
    {
        SendKeyValue(Digital_Key[index], "false");
    }
}

CHANGE Analog_Value_Is
{
    INTEGER index;

    index = GETLASTMODIFIEDARRAYINDEX();

    TRACE("Analog_Value_Is[%u] = %u", index, Analog_Value_Is[index]);

    IF(Connected)
    {
        SendKeyValue(Analog_Key[index], ITOA(LOW(Analog_Value_Is[index]))); // FIXME: hack route to ID
    }
}

CHANGE Serial_Value_Is
{
    INTEGER index;

    index = GETLASTMODIFIEDARRAYINDEX();

    TRACE("Serial_Value_Is[%u] = '%s'", index, Serial_Value_Is[index]);

    IF(Connected)
    {
        SendKeyValue(Serial_Key[index], Serial_Value_Is[index]);
    }
}


// Runtime

PUSH Connect
{
    // TODO: check if socket is connected
    __Connect__();
}

PUSH Disconnect
{
    // TODO: check if socket is connected
    SOCKETDISCONNECTCLIENT(Client);
}

FUNCTION __Inspect__()
{
    INTEGER i, j, hash, slot,
            digital_keys, digital_collisions,
            analog_keys, analog_collisions,
            serial_keys, serial_collisions;
    STRING key[255], match[2];

    digital_keys = 0;
    digital_collisions = 0;
    analog_keys = 0;
    analog_collisions = 0;
    serial_keys = 0;
    serial_collisions = 0;

    PRINT("Param Hash    Slot    | Key\n"); 
    FOR(i = 1 TO #KEY_VALUE_SIZE)
    {
        key = Digital_Key[i];
        IF(key != "")
        {
            digital_keys = digital_keys + 1;
	        hash = HashCode(key);
	
	        match = "==";
		    FOR(j = 0 TO #KEY_VALUE_SIZEx2 - 1)
		    {
		        slot = (hash + j) MOD #KEY_VALUE_SIZEx2;
		
		        IF(i = __Digital_Key_Hash_Table__[slot])
		        {
		            BREAK;
		        }
		    }

            IF(slot != hash)
            {
                match = "<>";
                digital_collisions = digital_collisions + 1;
            }
	
	        PRINT("D-%03u %04u %s %04u +%u | %s\n", i, hash, match, slot, j, key);
        }
    }

    FOR(i = 1 TO #KEY_VALUE_SIZE)
    {
        key = Analog_Key[i];
        IF(key != "")
        {
            analog_keys = analog_keys + 1;
	        hash = HashCode(key);
	
	        match = "==";
		    FOR(j = 0 TO #KEY_VALUE_SIZEx2 - 1)
		    {
		        slot = (hash + j) MOD #KEY_VALUE_SIZEx2;
		
		        IF(i = __Analog_Key_Hash_Table__[slot])
		        {
		            BREAK;
		        }
		    }

            IF(slot != hash)
            {
                match = "<>";
                analog_collisions = analog_collisions + 1;
            }
	
	        PRINT("A-%03u %04u %s %04u +%u | %s\n", i, hash, match, slot, j, key);
        }
    }

    FOR(i = 1 TO #KEY_VALUE_SIZE)
    {
        key = Serial_Key[i];
        IF(key != "")
        {
            serial_keys = serial_keys + 1;
	        hash = HashCode(key);
	
	        match = "==";
		    FOR(j = 0 TO #KEY_VALUE_SIZEx2 - 1)
		    {
		        slot = (hash + j) MOD #KEY_VALUE_SIZEx2;
		
		        IF(i = __Serial_Key_Hash_Table__[slot])
		        {
		            BREAK;
		        }
		    }

            IF(slot != hash)
            {
                match = "<>";
                serial_collisions = serial_collisions + 1;
            }
	
	        PRINT("S-%03u %04u %s %04u +%u | %s\n", i, hash, match, slot, j, key);
        }
    }

    IF(digital_keys > 0)
    {
        PRINT("Digital Hash Table: %u keys, %u collisions (%u%%)\n", digital_keys, digital_collisions, MULDIV(digital_collisions, 100, digital_keys));
    }

    IF(analog_keys > 0)
    {
        PRINT("Analog Hash Table:  %u keys, %u collisions (%u%%)\n", analog_keys, analog_collisions, MULDIV(analog_collisions, 100, analog_keys));
    }

    IF(serial_keys > 0)
    {
        PRINT("Serial Hash Table:  %u keys, %u collisions (%u%%)\n", serial_keys, serial_collisions, MULDIV(serial_collisions, 100, serial_keys));
    }
}

CHANGE User_Program_Command
{
    INTEGER i, j, hash, start, end, benchmark;
    STRING key[255];

    IF(User_Program_Command = "cloud inspect")
    {
        __Inspect__();
    }
    ELSE IF(User_Program_Command = "cloud inspect all")
    {
        PRINT("\nStarting Inspection ...\n");
        __Init__();
        __Inspect__();
    }
    ELSE IF(User_Program_Command = "cloud benchmark")
    {
        PRINT("\nStarting Benchmark ...\n");

        start = GETHSECONDS();
        FOR(i = 1 TO 30000)
        {
            hash = HashCode("benchmark-this-key-74");
        }
        end = GETHSECONDS();

        IF(end > start)
        {
            benchmark = end - start;
        }
        ELSE
        {
            benchmark = (65535 - start + 1) + end;
        }
        PRINT("HashCode('benchmark-this-key-74') 30,000 times in %u hsecs\n", benchmark);

        start = GETHSECONDS();
        FOR(i = 1 TO 30000)
        {
            hash = DigitalHashGet(Digital_Key[RANDOM(1, 998)]);
        }
        end = GETHSECONDS();

        IF(end > start)
        {
            benchmark = end - start;
        }
        ELSE
        {
            benchmark = (65535 - start + 1) + end;
        }
        PRINT("DigitalHashGet() 30,000 times in %u hsecs\n", benchmark);

        start = GETHSECONDS();
        FOR(i = 1 TO 3000)
        {
            key = Digital_Key[RANDOM(1, 998)];

            FOR(j = 1 TO #KEY_VALUE_SIZE)
            {
                IF(Digital_Key[j] = key)
                {
                    BREAK;
                }
            }
        }
        end = GETHSECONDS();

        IF(end > start)
        {
            benchmark = end - start;
        }
        ELSE
        {
            benchmark = (65535 - start + 1) + end;
        }
        PRINT("FindKey() 3000 times in %u hsecs\n", benchmark);
    }
    ELSE IF(User_Program_Command = "cloud init")
    {
        __Init__();
    }
    ELSE IF(LEFT(User_Program_Command, 10) = "cloud hash")
    {
        key = RIGHT(User_Program_Command, LEN(User_Program_Command) - 11);
        hash = HashCode(key);
        PRINT("cloud hash is %04u\n", hash);
    }
}

FUNCTION Main()
{
    STRING regions[7][3];
    INTEGER permutation;

    __Host__ = 0;
    __Parsing__ = 0;
    __Prompt__ = "";
    __Rx_Buffer__ = "";

    WAITFORINITIALIZATIONCOMPLETE();

    #IF_DEFINED #DEVELOP
    Hosts[0] = #CRESCENDO_CLOUD_HOST_DEV;
    #ENDIF

    #IF_NOT_DEFINED #DEVELOP
    // Client-side Load Balancing
    permutation = RANDOM(1, 6);

    IF(Server_Region = "AMS")
    {
        CSWITCH(permutation)
        {
            CASE(1):
            {
                Hosts[0] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(2):
            {
                Hosts[0] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(3):
            {
                Hosts[0] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(4):
            {
                Hosts[0] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(5):
            {
                Hosts[0] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(6):
            {
                Hosts[0] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
        }
    }
    ELSE IF(Server_Region = "FRA")
    {
        CSWITCH(permutation)
        {
            CASE(1):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(2):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(3):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(4):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(5):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(6):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
        }
    }
    ELSE IF(Server_Region = "LON")
    {
        CSWITCH(permutation)
        {
            CASE(1):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(2):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(3):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(4):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(5):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(6):
            {
                Hosts[1] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
        }
    }
    ELSE IF(Server_Region = "NYC")
    {
        CSWITCH(permutation)
        {
            CASE(1):
            {
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(2):
            {
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(3):
            {
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(4):
            {
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(5):
            {
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(6):
            {
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
        }
    }
    ELSE IF(Server_Region = "SFO")
    {
        CSWITCH(permutation)
        {
            CASE(1):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(2):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(3):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(4):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(5):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(6):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
        }
    }
    ELSE IF(Server_Region = "SGP")
    {
        CSWITCH(permutation)
        {
            CASE(1):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(2):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(3):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(4):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(5):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(6):
            {
                Hosts[8] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[6] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
        }
    }
    ELSE IF(Server_Region = "TOR")
    {
        CSWITCH(permutation)
        {
            CASE(1):
            {
                Hosts[6] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(2):
            {
                Hosts[6] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(3):
            {
                Hosts[6] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(4):
            {
                Hosts[6] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(5):
            {
                Hosts[6] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
            CASE(6):
            {
                Hosts[6] = #CRESCENDO_CLOUD_HOST_AMS3;
                Hosts[7] = #CRESCENDO_CLOUD_HOST_AMS2;
                Hosts[5] = #CRESCENDO_CLOUD_HOST_LON1;
                Hosts[8] = #CRESCENDO_CLOUD_HOST_FRA1;
                Hosts[1] = #CRESCENDO_CLOUD_HOST_NYC2;
                Hosts[2] = #CRESCENDO_CLOUD_HOST_NYC1;
                Hosts[3] = #CRESCENDO_CLOUD_HOST_NYC3;
                Hosts[0] = #CRESCENDO_CLOUD_HOST_TOR1;
                Hosts[4] = #CRESCENDO_CLOUD_HOST_SFO1;
                Hosts[9] = #CRESCENDO_CLOUD_HOST_SGP1;
                BREAK;
            }
        }
    }
    #ENDIF
}
